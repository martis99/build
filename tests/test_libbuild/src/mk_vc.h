#ifndef MK_VC
#define MK_VC

static const char *SLN_TEST = "SLNDIR := $(CURDIR)\n"
			      "TLD := $(LD)\n"
			      "TCC := $(CC)\n"
			      "\n"
			      "export\n"
			      "\n"
			      "CONFIGS := Debug\n"
			      "CONFIG := Debug\n"
			      "\n"
			      "SHOW := true\n"
			      "\n"
			      ".PHONY: all check test test/clean test/compile test/run test/coverage clean\n"
			      "\n"
			      "all: test\n"
			      "\n"
			      "check:\n"
			      "ifeq ($(filter $(CONFIG),$(CONFIGS)),)\n"
			      "\t$(error Config '$(CONFIG)' not found. Configs: $(CONFIGS))\n"
			      "endif\n"
			      "\n"
			      "test: check\n"
			      "\t@$(MAKE) -C test\n"
			      "\n"
			      "test/clean: check\n"
			      "\t@$(MAKE) -C test clean\n"
			      "\n"
			      "test/compile: check\n"
			      "\t@$(MAKE) -C test compile\n"
			      "\n"
			      "test/run: check test/compile\n"
			      "\t@$(MAKE) -C test run\n"
			      "\n"
			      "test/coverage: check\n"
			      "\t@$(MAKE) -C test coverage\n"
			      "\n"
			      "clean: check\n"
			      "	@$(MAKE) -C test clean\n";

static const char *OS_SLN =
	"SLNDIR := $(CURDIR)\n"
	"TLD := $(LD)\n"
	"TCC := $(CC)\n"
	"\n"
	"TCC = $(SLNDIR)/bin/toolchain/$(PLATFORM)/gcc/bin/$(PLATFORM)-elf-gcc\n"
	"\n"
	"export\n"
	"\n"
	"CONFIGS := Debug Release\n"
	"CONFIG := Debug\n"
	"\n"
	"SHOW := true\n"
	"\n"
	".PHONY: all check image image/clean image/compile image/run image/coverage kernel kernel/clean kernel/compile kernel/coverage boot boot/clean boot/compile boot/coverage gcc-13.1.0 gcc-13.1.0/clean gcc-13.1.0/compile gcc-13.1.0/coverage clean\n"
	"\n"
	"all: image kernel boot gcc-13.1.0\n"
	"\n"
	"check:\n"
	"ifeq ($(filter $(CONFIG),$(CONFIGS)),)\n"
	"\t$(error Config '$(CONFIG)' not found. Configs: $(CONFIGS))\n"
	"endif\n"
	"\n"
	"image: check boot gcc-13.1.0 kernel\n"
	"\t@$(MAKE) -C os/image\n"
	"\n"
	"image/clean: check\n"
	"\t@$(MAKE) -C os/image clean\n"
	"\n"
	"image/compile: check boot/compile gcc-13.1.0/compile kernel/compile\n"
	"\t@$(MAKE) -C os/image compile\n"
	"\n"
	"image/run: check image/compile\n"
	"\t@$(MAKE) -C os/image run\n"
	"\n"
	"image/coverage: check\n"
	"\t@$(MAKE) -C os/image coverage\n"
	"\n"
	"kernel: check gcc-13.1.0\n"
	"\t@$(MAKE) -C os/kernel\n"
	"\n"
	"kernel/clean: check\n"
	"\t@$(MAKE) -C os/kernel clean\n"
	"\n"
	"kernel/compile: check gcc-13.1.0/compile\n"
	"\t@$(MAKE) -C os/kernel compile\n"
	"\n"
	"kernel/coverage: check\n"
	"\t@$(MAKE) -C os/kernel coverage\n"
	"\n"
	"boot: check\n"
	"\t@$(MAKE) -C os/boot\n"
	"\n"
	"boot/clean: check\n"
	"\t@$(MAKE) -C os/boot clean\n"
	"\n"
	"boot/compile: check\n"
	"\t@$(MAKE) -C os/boot compile\n"
	"\n"
	"boot/coverage: check\n"
	"\t@$(MAKE) -C os/boot coverage\n"
	"\n"
	"gcc-13.1.0: check\n"
	"\t@$(MAKE) -C toolchain/gcc\n"
	"\n"
	"gcc-13.1.0/clean: check\n"
	"\t@$(MAKE) -C toolchain/gcc clean\n"
	"\n"
	"gcc-13.1.0/compile: check\n"
	"\t@$(MAKE) -C toolchain/gcc compile\n"
	"\n"
	"gcc-13.1.0/coverage: check\n"
	"\t@$(MAKE) -C toolchain/gcc coverage\n"
	"\n"
	"clean: check\n"
	"\t@$(MAKE) -C os/image clean\n"
	"\t@$(MAKE) -C os/kernel clean\n"
	"\t@$(MAKE) -C os/boot clean\n"
	"\t@$(MAKE) -C toolchain/gcc clean\n";

static const char *OS_PROJ_GCC =
	"OUTDIR := $(SLNDIR)/bin/toolchain/$(PLATFORM)/gcc\n"
	"URL := http://ftp.gnu.org/gnu/gcc/gcc-13.1.0/\n"
	"NAME := gcc-13.1.0\n"
	"FORMAT := tar.gz\n"
	"FILE := $(NAME).$(FORMAT)\n"
	"DLDIR := $(SLNDIR)/dl/$(FILE)\n"
	"SRCDIR := $(SLNDIR)/staging/$(NAME)\n"
	"BUILDDIR := $(SLNDIR)/build/$(PLATFORM)/$(NAME)\n"
	"LOGDIR := $(SLNDIR)/logs/$(PLATFORM)/$(NAME)\n"
	"\n"
	".PHONY: check all compile clean\n"
	"\n"
	"check:\n"
	"ifeq (, $(shell which curl))\n"
	"\tsudo apt install curl\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l g++))\n"
	"\tsudo apt install g++\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l libgmp-dev))\n"
	"\tsudo apt install libgmp-dev\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l libmpfr-dev))\n"
	"\tsudo apt install libmpfr-dev\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l libmpc-dev))\n"
	"\tsudo apt install libmpc-dev\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l texinfo))\n"
	"\tsudo apt install texinfo\n"
	"endif\n"
	"\n"
	"all: compile\n"
	"\n"
	"$(DLDIR):\n"
	"\t@mkdir -p $(@D)\n"
	"\t@cd $(@D) && curl -O $(URL)$(FILE)\n"
	"\n"
	"$(SRCDIR)/done: $(DLDIR)\n"
	"\t@mkdir -p $(SLNDIR)/staging\n"
	"\t@tar xf $(DLDIR) -C $(SLNDIR)/staging\n"
	"\t@touch $(SRCDIR)/done\n"
	"\n"
	"$(OUTDIR)/$(NAME): $(SRCDIR)/done\n"
	"\t@mkdir -p $(LOGDIR) $(BUILDDIR) $(OUTDIR)\n"
	"\t@cd $(BUILDDIR) && $(SRCDIR)/configure --target=$(PLATFORM)-elf --prefix=$(OUTDIR) --disable-nls --disable-libssp --enable-languages=c --without-headers 2>&1 | tee $(LOGDIR)/configure.log\n"
	"\t@cd $(BUILDDIR) && make all-gcc all-target-libgcc install-gcc install-target-libgcc  2>&1 | tee $(LOGDIR)/make.log\n"
	"\t@touch $(OUTDIR)/$(NAME)\n"
	"\n"
	"compile: check $(OUTDIR)/$(NAME)\n"
	"\n"
	"clean:\n";

static const char *OS_PROJ_BOOT = "OUTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/boot/\n"
				  "INTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/boot/int/\n"
				  "REPDIR := $(OUTDIR)coverage-report/\n"
				  "DEPS := $(shell find src -name '*.inc')\n"
				  "SRC_ASM := $(shell find src -name '*.asm')\n"
				  "OBJ_ASM := $(patsubst %.asm, $(INTDIR)%.bin, $(SRC_ASM))\n"
				  "LCOV := $(OUTDIR)lcov.info\n"
				  "COV := $(LCOV) $(REPDIR)\n"
				  "TARGET := $(OUTDIR)boot.bin\n"
				  "\n"
				  "ifeq ($(PLATFORM), x86_64)\n"
				  "BITS := 64\n"
				  "else\n"
				  "BITS := 32\n"
				  "endif\n"
				  "\n"
				  "FLAGS := -Isrc -DARCH=$(PLATFORM)\n"
				  "ASMFLAGS += $(FLAGS) -fbin\n"
				  "LDFLAGS +=\n"
				  "\n"
				  "RM += -r\n"
				  "\n"
				  "CONFIG_FLAGS :=\n"
				  "\n"
				  "ifeq ($(CONFIG), Debug)\n"
				  "CONFIG_FLAGS += -ggdb3 -O0\n"
				  "endif\n"
				  "\n"
				  ".PHONY: all check check_coverage boot compile coverage clean\n"
				  "\n"
				  "all: boot\n"
				  "\n"
				  "check:\n"
				  "ifeq (, $(shell which nasm))\n"
				  "\tsudo apt install nasm\n"
				  "endif\n"
				  "\n"
				  "check_coverage: check\n"
				  "\t$(eval CONFIG_FLAGS += --coverage -fprofile-abs-path)\n"
				  "ifeq (, $(shell which lcov))\n"
				  "\tsudo apt install lcov\n"
				  "endif\n"
				  "\n"
				  "boot: clean compile\n"
				  "\n"
				  "compile: check $(TARGET)\n"
				  "\n"
				  "coverage: clean check_coverage $(TARGET)\n"
				  "\n"
				  "$(TARGET): $(OBJ_ASM)\n"
				  "\t@mkdir -p $(@D)\n"
				  "\t@cat $^ > $@\n"
				  "\n"
				  "$(INTDIR)%.bin: %.asm\n"
				  "\t@mkdir -p $(@D)\n"
				  "\t@nasm $< $(ASMFLAGS) -o $@\n"
				  "\n"
				  "clean:\n"
				  "\t@$(RM) $(TARGET) $(OBJ_ASM)\n";

static const char *OS_PROJ_KERNEL = "OUTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/kernel/\n"
				    "INTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/kernel/int/\n"
				    "REPDIR := $(OUTDIR)coverage-report/\n"
				    "DEPS := $(shell find src -name '*.inc')\n"
				    "DEPS += $(shell find src -name '*.h')\n"
				    "SRC_ASM := $(shell find src -name '*.asm')\n"
				    "SRC_C := $(shell find src -name '*.c')\n"
				    "OBJ_ASM := $(patsubst %.asm, $(INTDIR)%.o, $(SRC_ASM))\n"
				    "OBJ_C := $(patsubst %.c, $(INTDIR)%.o, $(SRC_C))\n"
				    "LCOV := $(OUTDIR)lcov.info\n"
				    "COV := $(patsubst %.c, $(INTDIR)%.gcno, $(SRC_C))\n"
				    "COV += $(patsubst %.c, $(INTDIR)%.gcda, $(SRC_C))\n"
				    "COV += $(LCOV) $(REPDIR)\n"
				    "TARGET := $(OUTDIR)kernel.bin\n"
				    "\n"
				    "ifeq ($(PLATFORM), x86_64)\n"
				    "BITS := 64\n"
				    "else\n"
				    "BITS := 32\n"
				    "endif\n"
				    "\n"
				    "FLAGS := -Isrc -DARCH=$(PLATFORM)\n"
				    "ASMFLAGS += $(FLAGS) -felf$(BITS)\n"
				    "CFLAGS += $(FLAGS) -ffreestanding -m$(BITS)\n"
				    "LDFLAGS +=\n"
				    "\n"
				    "RM += -r\n"
				    "\n"
				    "CONFIG_FLAGS :=\n"
				    "\n"
				    "ifeq ($(CONFIG), Debug)\n"
				    "CONFIG_FLAGS += -ggdb3 -O0\n"
				    "endif\n"
				    "\n"
				    ".PHONY: all check check_coverage kernel compile coverage clean\n"
				    "\n"
				    "all: kernel\n"
				    "\n"
				    "check:\n"
				    "ifeq (, $(shell which nasm))\n"
				    "\tsudo apt install nasm\n"
				    "endif\n"
				    "ifeq (, $(shell which gcc))\n"
				    "\tsudo apt install gcc\n"
				    "endif\n"
				    "\n"
				    "check_coverage: check\n"
				    "\t$(eval CONFIG_FLAGS += --coverage -fprofile-abs-path)\n"
				    "ifeq (, $(shell which lcov))\n"
				    "\tsudo apt install lcov\n"
				    "endif\n"
				    "\n"
				    "kernel: clean compile\n"
				    "\n"
				    "compile: check $(TARGET) $(TARGET).elf\n"
				    "\n"
				    "coverage: clean check_coverage $(TARGET)\n"
				    "\n"
				    "$(TARGET): $(OBJ_ASM) $(OBJ_C)\n"
				    "\t@mkdir -p $(@D)\n"
				    "\t@$(TLD) -o $@ -Tlinker.ld $^ --oformat binary $(LDFLAGS)\n"
				    "\n"
				    "$(TARGET).elf: $(OBJ_ASM) $(OBJ_C)\n"
				    "\t@mkdir -p $(@D)\n"
				    "\t@$(TLD) -o $@ -Tlinker.ld $^ $(LDFLAGS)\n"
				    "\n"
				    "$(INTDIR)%.o: %.asm\n"
				    "\t@mkdir -p $(@D)\n"
				    "\t@nasm $< $(ASMFLAGS) -o $@\n"
				    "\n"
				    "$(INTDIR)%.o: %.c\n"
				    "\t@mkdir -p $(@D)\n"
				    "\t@$(TCC) $(CONFIG_FLAGS) $(CFLAGS) -c -o $@ $<\n"
				    "\n"
				    "clean:\n"
				    "\t@$(RM) $(TARGET) $(TARGET).elf $(OBJ_ASM) $(OBJ_C) $(COV)\n";

static const char *OS_PROJ_IMAGE = "OUTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/image/\n"
				   "INTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/image/int/\n"
				   "REPDIR := $(OUTDIR)coverage-report/\n"
				   "LCOV := $(OUTDIR)lcov.info\n"
				   "COV := $(LCOV) $(REPDIR)\n"
				   "TARGET := $(OUTDIR)image\n"
				   "\n"
				   "ifeq ($(PLATFORM), x86_64)\n"
				   "BITS := 64\n"
				   "else\n"
				   "BITS := 32\n"
				   "endif\n"
				   "\n"
				   "FLAGS :=\n"
				   "\n"
				   "RM += -r\n"
				   "\n"
				   "CONFIG_FLAGS :=\n"
				   "\n"
				   "ifeq ($(CONFIG), Debug)\n"
				   "CONFIG_FLAGS += -ggdb3 -O0\n"
				   "endif\n"
				   "\n"
				   "SHOW := true\n"
				   "\n"
				   ".PHONY: all check check_coverage image compile coverage run clean\n"
				   "\n"
				   "all: image\n"
				   "\n"
				   "check:\n"
				   "ifeq (, $(shell dpkg -l qemu-system-x86))\n"
				   "\tsudo apt install qemu-system-x86\n"
				   "endif\n"
				   "\n"
				   "check_coverage: check\n"
				   "\t$(eval CONFIG_FLAGS += --coverage -fprofile-abs-path)\n"
				   "ifeq (, $(shell which lcov))\n"
				   "\tsudo apt install lcov\n"
				   "endif\n"
				   "\n"
				   "image: clean compile\n"
				   "\n"
				   "compile: check $(TARGET)\n"
				   "\n"
				   "coverage: clean check_coverage $(TARGET)\n"
				   "\t@$(TARGET) $(ARGS)\n"
				   "\t@lcov -q -c -d $(SLNDIR) -o $(LCOV)\n"
				   "ifeq ($(SHOW), true)\n"
				   "\t@genhtml -q $(LCOV) -o $(REPDIR)\n"
				   "\t@open $(REPDIR)index.html\n"
				   "endif\n"
				   "\n"
				   "$(TARGET): $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/boot/boot.bin $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/kernel/kernel.bin\n"
				   "\t@mkdir -p $(@D)\n"
				   "\t@cat $^ > $@\n"
				   "\n"
				   "run: $(TARGET)\n"
				   "ifeq ($(CONFIG), Debug)\n"
				   "\tqemu-system-$(PLATFORM) -s -S $(TARGET)\n"
				   "else\n"
				   "\tqemu-system-$(PLATFORM) $(TARGET)\n"
				   "endif\n"
				   "\n"
				   "clean:\n"
				   "\t@$(RM) $(TARGET)\n";

#endif