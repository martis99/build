#ifndef MK_VC
#define MK_VC

static const char *SLN_TEST = "SLNDIR := $(CURDIR)\n"
			      "TLD := $(LD)\n"
			      "TCC := $(CC)\n"
			      "\n"
			      "export\n"
			      "\n"
			      "CONFIGS := Debug\n"
			      "CONFIG := Debug\n"
			      "\n"
			      "SHOW := true\n"
			      "\n"
			      ".PHONY: all check test test/clean test/compile test/run test/coverage clean\n"
			      "\n"
			      "all: test\n"
			      "\n"
			      "check:\n"
			      "ifeq ($(filter $(CONFIG),$(CONFIGS)),)\n"
			      "\t$(error Config '$(CONFIG)' not found. Configs: $(CONFIGS))\n"
			      "endif\n"
			      "\n"
			      "test: check\n"
			      "\t@$(MAKE) -C test\n"
			      "\n"
			      "test/clean: check\n"
			      "\t@$(MAKE) -C test clean\n"
			      "\n"
			      "test/compile: check\n"
			      "\t@$(MAKE) -C test compile\n"
			      "\n"
			      "test/run: check test/compile\n"
			      "\t@$(MAKE) -C test run\n"
			      "\n"
			      "test/coverage: check\n"
			      "\t@$(MAKE) -C test coverage\n"
			      "\n"
			      "clean: check\n"
			      "	@$(MAKE) -C test clean\n";

static const char *OS_SLN =
	"SLNDIR := $(CURDIR)\n"
	"TLD := $(LD)\n"
	"TCC := $(CC)\n"
	"\n"
	"TCC = $(SLNDIR)/bin/toolchain/$(PLATFORM)/gcc/bin/$(PLATFORM)-elf-gcc\n"
	"\n"
	"export\n"
	"\n"
	"CONFIGS := Debug Release\n"
	"CONFIG := Debug\n"
	"\n"
	"SHOW := true\n"
	"\n"
	".PHONY: all check boot-bin boot-bin/clean boot-bin/compile gcc-13.1.0 gcc-13.1.0/clean gcc-13.1.0/compile kernel-bin kernel-bin/clean kernel-bin/compile kernel-elf kernel-elf/clean kernel-elf/compile image-disk image-disk/clean image-disk/compile image-disk/run image-disk/artifact image-floppy image-floppy/clean image-floppy/compile image-floppy/run image-floppy/artifact artifact clean\n"
	"\n"
	"all: boot-bin gcc-13.1.0 kernel-bin kernel-elf image-disk image-floppy\n"
	"\n"
	"check:\n"
	"ifeq ($(filter $(CONFIG),$(CONFIGS)),)\n"
	"\t$(error Config '$(CONFIG)' not found. Configs: $(CONFIGS))\n"
	"endif\n"
	"\n"
	"boot-bin: check\n"
	"\t@$(MAKE) -C os/boot/bin\n"
	"\n"
	"boot-bin/clean: check\n"
	"\t@$(MAKE) -C os/boot/bin clean\n"
	"\n"
	"boot-bin/compile: check\n"
	"\t@$(MAKE) -C os/boot/bin compile\n"
	"\n"
	"gcc-13.1.0: check\n"
	"\t@$(MAKE) -C toolchain/gcc\n"
	"\n"
	"gcc-13.1.0/clean: check\n"
	"\t@$(MAKE) -C toolchain/gcc clean\n"
	"\n"
	"gcc-13.1.0/compile: check\n"
	"\t@$(MAKE) -C toolchain/gcc compile\n"
	"\n"
	"kernel-bin: check gcc-13.1.0\n"
	"\t@$(MAKE) -C os/kernel/bin\n"
	"\n"
	"kernel-bin/clean: check\n"
	"\t@$(MAKE) -C os/kernel/bin clean\n"
	"\n"
	"kernel-bin/compile: check gcc-13.1.0/compile\n"
	"\t@$(MAKE) -C os/kernel/bin compile\n"
	"\n"
	"kernel-elf: check gcc-13.1.0\n"
	"\t@$(MAKE) -C os/kernel/elf\n"
	"\n"
	"kernel-elf/clean: check\n"
	"\t@$(MAKE) -C os/kernel/elf clean\n"
	"\n"
	"kernel-elf/compile: check gcc-13.1.0/compile\n"
	"\t@$(MAKE) -C os/kernel/elf compile\n"
	"\n"
	"image-disk: check boot-bin gcc-13.1.0 kernel-bin kernel-elf\n"
	"\t@$(MAKE) -C os/image/disk\n"
	"\n"
	"image-disk/clean: check\n"
	"\t@$(MAKE) -C os/image/disk clean\n"
	"\n"
	"image-disk/compile: check boot-bin/compile gcc-13.1.0/compile kernel-bin/compile kernel-elf/compile\n"
	"\t@$(MAKE) -C os/image/disk compile\n"
	"\n"
	"image-disk/run: check image-disk/compile\n"
	"\t@$(MAKE) -C os/image/disk run\n"
	"\n"
	"image-disk/artifact: check image-disk/compile\n"
	"\t@$(MAKE) -C os/image/disk artifact\n"
	"\n"
	"image-floppy: check boot-bin gcc-13.1.0 kernel-bin kernel-elf\n"
	"\t@$(MAKE) -C os/image/floppy\n"
	"\n"
	"image-floppy/clean: check\n"
	"\t@$(MAKE) -C os/image/floppy clean\n"
	"\n"
	"image-floppy/compile: check boot-bin/compile gcc-13.1.0/compile kernel-bin/compile kernel-elf/compile\n"
	"\t@$(MAKE) -C os/image/floppy compile\n"
	"\n"
	"image-floppy/run: check image-floppy/compile\n"
	"\t@$(MAKE) -C os/image/floppy run\n"
	"\n"
	"image-floppy/artifact: check image-floppy/compile\n"
	"\t@$(MAKE) -C os/image/floppy artifact\n"
	"\n"
	"artifact: image-disk/artifact image-floppy/artifact\n"
	"\n"
	"clean: check\n"
	"\t@$(MAKE) -C os/boot/bin clean\n"
	"\t@$(MAKE) -C os/image/disk clean\n"
	"\t@$(MAKE) -C os/image/floppy clean\n"
	"\t@$(MAKE) -C os/kernel/bin clean\n"
	"\t@$(MAKE) -C os/kernel/elf clean\n"
	"\t@$(MAKE) -C toolchain/gcc clean\n";

static const char *OS_PROJ_BOOT_BIN = "OUTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/boot/bin/\n"
				      "INTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/boot/bin/int/\n"
				      "DEPS := $(shell find ../src -name '*.inc')\n"
				      "SRC_ASM := $(shell find ../src -name '*.asm')\n"
				      "OBJ_ASM := $(patsubst %.asm, $(INTDIR)%.bin, $(SRC_ASM))\n"
				      "TARGET := $(OUTDIR)boot.bin\n"
				      "\n"
				      "ifeq ($(PLATFORM), x86_64)\n"
				      "BITS := 64\n"
				      "else\n"
				      "BITS := 32\n"
				      "endif\n"
				      "\n"
				      "FLAGS := -I../src -DARCH=$(PLATFORM) -DFORMAT=BIN\n"
				      "ASMFLAGS += $(FLAGS) -fbin\n"
				      "\n"
				      "RM += -r\n"
				      "\n"
				      "CONFIG_FLAGS :=\n"
				      "\n"
				      "ifeq ($(CONFIG), Debug)\n"
				      "CONFIG_FLAGS += -ggdb3 -O0\n"
				      "endif\n"
				      "\n"
				      ".PHONY: all check boot-bin compile clean\n"
				      "\n"
				      "all: boot-bin\n"
				      "\n"
				      "check:\n"
				      "ifeq (, $(shell which nasm))\n"
				      "\tsudo apt install nasm\n"
				      "endif\n"
				      "\n"
				      "boot-bin: clean compile\n"
				      "\n"
				      "compile: check $(TARGET)\n"
				      "\n"
				      "$(TARGET): $(OBJ_ASM)\n"
				      "\t@mkdir -p $(@D)\n"
				      "\t@cat $^ > $@\n"
				      "\n"
				      "$(INTDIR)%.bin: %.asm\n"
				      "\t@mkdir -p $(@D)\n"
				      "\t@nasm $< $(ASMFLAGS) -o $@\n"
				      "\n"
				      "clean:\n"
				      "\t@$(RM) $(TARGET) $(OBJ_ASM)\n";

static const char *OS_PROJ_GCC =
	"OUTDIR := $(SLNDIR)/bin/toolchain/$(PLATFORM)/gcc\n"
	"URL := http://ftp.gnu.org/gnu/gcc/gcc-13.1.0/\n"
	"NAME := gcc-13.1.0\n"
	"FORMAT := tar.gz\n"
	"FILE := $(NAME).$(FORMAT)\n"
	"DLDIR := $(SLNDIR)/dl/$(FILE)\n"
	"SRCDIR := $(SLNDIR)/staging/$(NAME)\n"
	"BUILDDIR := $(SLNDIR)/build/$(PLATFORM)/$(NAME)\n"
	"LOGDIR := $(SLNDIR)/logs/$(PLATFORM)/$(NAME)\n"
	"\n"
	".PHONY: all check compile clean\n"
	"\n"
	"all: compile\n"
	"\n"
	"check:\n"
	"ifeq (, $(shell which curl))\n"
	"\tsudo apt install curl\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l g++))\n"
	"\tsudo apt install g++\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l libgmp-dev))\n"
	"\tsudo apt install libgmp-dev\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l libmpfr-dev))\n"
	"\tsudo apt install libmpfr-dev\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l libmpc-dev))\n"
	"\tsudo apt install libmpc-dev\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l texinfo))\n"
	"\tsudo apt install texinfo\n"
	"endif\n"
	"\n"
	"$(DLDIR):\n"
	"\t@mkdir -p $(@D)\n"
	"\t@cd $(@D) && curl -O $(URL)$(FILE)\n"
	"\n"
	"$(SRCDIR)/done: $(DLDIR)\n"
	"\t@mkdir -p $(SLNDIR)/staging\n"
	"\t@tar xf $(DLDIR) -C $(SLNDIR)/staging\n"
	"\t@touch $(SRCDIR)/done\n"
	"\n"
	"$(OUTDIR)/$(NAME): $(SRCDIR)/done\n"
	"\t@mkdir -p $(LOGDIR) $(BUILDDIR) $(OUTDIR)\n"
	"\t@cd $(BUILDDIR) && $(SRCDIR)/configure --target=$(PLATFORM)-elf --prefix=$(OUTDIR) --disable-nls --disable-libssp --enable-languages=c --without-headers 2>&1 | tee $(LOGDIR)/configure.log\n"
	"\t@cd $(BUILDDIR) && make all-gcc all-target-libgcc install-gcc install-target-libgcc  2>&1 | tee $(LOGDIR)/make.log\n"
	"\t@touch $(OUTDIR)/$(NAME)\n"
	"\n"
	"compile: check $(OUTDIR)/$(NAME)\n"
	"\n"
	"clean:\n";

static const char *OS_PROJ_KERNEL_BIN = "OUTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/kernel/bin/\n"
					"INTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/kernel/bin/int/\n"
					"DEPS := $(shell find ../src -name '*.inc')\n"
					"DEPS += $(shell find ../src -name '*.h')\n"
					"SRC_ASM := $(shell find ../src -name '*.asm')\n"
					"SRC_C := $(shell find ../src -name '*.c')\n"
					"OBJ_ASM := $(patsubst %.asm, $(INTDIR)%.o, $(SRC_ASM))\n"
					"OBJ_C := $(patsubst %.c, $(INTDIR)%.o, $(SRC_C))\n"
					"TARGET := $(OUTDIR)kernel.bin\n"
					"\n"
					"ifeq ($(PLATFORM), x86_64)\n"
					"BITS := 64\n"
					"else\n"
					"BITS := 32\n"
					"endif\n"
					"\n"
					"FLAGS := -I../src -DARCH=$(PLATFORM)\n"
					"ASMFLAGS += $(FLAGS) -felf$(BITS)\n"
					"CFLAGS += $(FLAGS) -ffreestanding -m$(BITS)\n"
					"LDFLAGS +=\n"
					"\n"
					"RM += -r\n"
					"\n"
					"CONFIG_FLAGS :=\n"
					"\n"
					"ifeq ($(CONFIG), Debug)\n"
					"CONFIG_FLAGS += -ggdb3 -O0\n"
					"endif\n"
					"\n"
					".PHONY: all check kernel-bin compile clean\n"
					"\n"
					"all: kernel-bin\n"
					"\n"
					"check:\n"
					"ifeq (, $(shell which nasm))\n"
					"\tsudo apt install nasm\n"
					"endif\n"
					"ifeq (, $(shell which gcc))\n"
					"\tsudo apt install gcc\n"
					"endif\n"
					"\n"
					"kernel-bin: clean compile\n"
					"\n"
					"compile: check $(TARGET)\n"
					"\n"
					"$(TARGET): $(OBJ_ASM) $(OBJ_C)\n"
					"\t@mkdir -p $(@D)\n"
					"\t@$(TLD) -o $@ -Tlinker.ld $^ --oformat binary $(LDFLAGS)\n"
					"\n"
					"$(INTDIR)%.o: %.asm\n"
					"\t@mkdir -p $(@D)\n"
					"\t@nasm $< $(ASMFLAGS) -o $@\n"
					"\n"
					"$(INTDIR)%.o: %.c\n"
					"\t@mkdir -p $(@D)\n"
					"\t@$(TCC) $(CONFIG_FLAGS) $(CFLAGS) -c -o $@ $<\n"
					"\n"
					"clean:\n"
					"\t@$(RM) $(TARGET) $(OBJ_ASM) $(OBJ_C) $(COV)\n";

static const char *OS_PROJ_KERNEL_ELF = "OUTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/kernel/elf/\n"
					"INTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/kernel/elf/int/\n"
					"DEPS := $(shell find ../src -name '*.inc')\n"
					"DEPS += $(shell find ../src -name '*.h')\n"
					"SRC_ASM := $(shell find ../src -name '*.asm')\n"
					"SRC_C := $(shell find ../src -name '*.c')\n"
					"OBJ_ASM := $(patsubst %.asm, $(INTDIR)%.o, $(SRC_ASM))\n"
					"OBJ_C := $(patsubst %.c, $(INTDIR)%.o, $(SRC_C))\n"
					"TARGET := $(OUTDIR)kernel.elf\n"
					"\n"
					"ifeq ($(PLATFORM), x86_64)\n"
					"BITS := 64\n"
					"else\n"
					"BITS := 32\n"
					"endif\n"
					"\n"
					"FLAGS := -I../src -DARCH=$(PLATFORM)\n"
					"ASMFLAGS += $(FLAGS) -felf$(BITS)\n"
					"CFLAGS += $(FLAGS) -ffreestanding -m$(BITS)\n"
					"LDFLAGS +=\n"
					"\n"
					"RM += -r\n"
					"\n"
					"CONFIG_FLAGS :=\n"
					"\n"
					"ifeq ($(CONFIG), Debug)\n"
					"CONFIG_FLAGS += -ggdb3 -O0\n"
					"endif\n"
					"\n"
					".PHONY: all check kernel-elf compile clean\n"
					"\n"
					"all: kernel-elf\n"
					"\n"
					"check:\n"
					"ifeq (, $(shell which nasm))\n"
					"\tsudo apt install nasm\n"
					"endif\n"
					"ifeq (, $(shell which gcc))\n"
					"\tsudo apt install gcc\n"
					"endif\n"
					"\n"
					"kernel-elf: clean compile\n"
					"\n"
					"compile: check $(TARGET)\n"
					"\n"
					"$(TARGET): $(OBJ_ASM) $(OBJ_C)\n"
					"\t@mkdir -p $(@D)\n"
					"\t@$(TLD) -o $@ -Tlinker.ld $^ $(LDFLAGS)\n"
					"\n"
					"$(INTDIR)%.o: %.asm\n"
					"\t@mkdir -p $(@D)\n"
					"\t@nasm $< $(ASMFLAGS) -o $@\n"
					"\n"
					"$(INTDIR)%.o: %.c\n"
					"\t@mkdir -p $(@D)\n"
					"\t@$(TCC) $(CONFIG_FLAGS) $(CFLAGS) -c -o $@ $<\n"
					"\n"
					"clean:\n"
					"\t@$(RM) $(TARGET) $(OBJ_ASM) $(OBJ_C) $(COV)\n";

static const char *OS_PROJ_IMAGE_DISK = "OUTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/image/disk/\n"
					"INTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/image/disk/int/\n"
					"TARGET := $(OUTDIR)disk.bin\n"
					"ARTIFACTDIR := $(SLNDIR)/tmp/artifact/\n"
					"ARTIFACT := $(ARTIFACTDIR)disk-$(PLATFORM)-$(CONFIG).bin\n"
					"\n"
					"ifeq ($(PLATFORM), x86_64)\n"
					"BITS := 64\n"
					"else\n"
					"BITS := 32\n"
					"endif\n"
					"\n"
					"FLAGS :=\n"
					"\n"
					"RM += -r\n"
					"\n"
					"CONFIG_FLAGS :=\n"
					"\n"
					"ifeq ($(CONFIG), Debug)\n"
					"CONFIG_FLAGS += -ggdb3 -O0\n"
					"endif\n"
					"\n"
					".PHONY: all check image-disk compile run artifact clean\n"
					"\n"
					"all: image-disk\n"
					"\n"
					"check:\n"
					"ifeq (, $(shell dpkg -l qemu-system-x86))\n"
					"\tsudo apt install qemu-system-x86\n"
					"endif\n"
					"\n"
					"image-disk: clean compile\n"
					"\n"
					"compile: check $(TARGET)\n"
					"\n"
					"$(TARGET):\n"
					"\t@mkdir -p $(@D)\n"
					"\t@dd if=$(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/boot/bin/boot.bin status=none >> $@\n"
					"\t@dd if=$(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/kernel/bin/kernel.bin status=none >> $@\n"
					"\n"
					"run: check $(TARGET)\n"
					"ifeq ($(CONFIG), Debug)\n"
					"\tqemu-system-$(PLATFORM) -s -S -hda $(TARGET)\n"
					"else\n"
					"\tqemu-system-$(PLATFORM) -hda $(TARGET)\n"
					"endif\n"
					"\n"
					"artifact: check $(TARGET)\n"
					"\t@mkdir -p $(ARTIFACTDIR)\n"
					"\t@cp $(TARGET) $(ARTIFACT)\n"
					"\n"
					"clean:\n"
					"\t@$(RM) $(TARGET) $(ARTIFACT)\n";

static const char *OS_PROJ_IMAGE_FLOPPY =
	"OUTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/image/floppy/\n"
	"INTDIR := $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/image/floppy/int/\n"
	"TARGET := $(OUTDIR)floppy.img\n"
	"ARTIFACTDIR := $(SLNDIR)/tmp/artifact/\n"
	"ARTIFACT := $(ARTIFACTDIR)floppy-$(PLATFORM)-$(CONFIG).img\n"
	"\n"
	"ifeq ($(PLATFORM), x86_64)\n"
	"BITS := 64\n"
	"else\n"
	"BITS := 32\n"
	"endif\n"
	"\n"
	"FLAGS :=\n"
	"\n"
	"RM += -r\n"
	"\n"
	"CONFIG_FLAGS :=\n"
	"\n"
	"ifeq ($(CONFIG), Debug)\n"
	"CONFIG_FLAGS += -ggdb3 -O0\n"
	"endif\n"
	"\n"
	".PHONY: all check image-floppy compile run artifact clean\n"
	"\n"
	"all: image-floppy\n"
	"\n"
	"check:\n"
	"ifeq (, $(shell which mcopy))\n"
	"\tsudo apt install mtools\n"
	"endif\n"
	"ifeq (, $(shell dpkg -l qemu-system-x86))\n"
	"\tsudo apt install qemu-system-x86\n"
	"endif\n"
	"\n"
	"image-floppy: clean compile\n"
	"\n"
	"compile: check $(TARGET)\n"
	"\n"
	"$(TARGET): $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/boot/bin/boot.bin $(SLNDIR)/bin/$(CONFIG)-$(PLATFORM)/os/kernel/bin/kernel.bin\n"
	"\t@mkdir -p $(@D)\n"
	"\t@dd if=/dev/zero of=$@ bs=512 count=2880 status=none\n"
	"\t@mkfs.fat -F12 -n \"NBOS\" $@\n"
	"\t@dd if=$< of=$@ conv=notrunc status=none\n"
	"\t@mcopy -i $@ $(word 2,$^) \"::$(shell basename $(word 2,$^))\"\n"
	"\n"
	"run: check $(TARGET)\n"
	"ifeq ($(CONFIG), Debug)\n"
	"\tqemu-system-$(PLATFORM) -s -S -fda $(TARGET)\n"
	"else\n"
	"\tqemu-system-$(PLATFORM) -fda $(TARGET)\n"
	"endif\n"
	"\n"
	"artifact: check $(TARGET)\n"
	"\t@mkdir -p $(ARTIFACTDIR)\n"
	"\t@cp $(TARGET) $(ARTIFACT)\n"
	"\n"
	"clean:\n"
	"\t@$(RM) $(TARGET) $(ARTIFACT)\n";
#endif
